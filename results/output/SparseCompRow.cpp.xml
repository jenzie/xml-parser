<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="C:/Users/Serenity/SkyDrive/Documents/College/rit_research/xml-parser/results\input_src\SparseCompRow.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

    <comment type="block">/* multiple iterations used to make kernel have roughly
        same granulairty as other Scimark kernels. */</comment>

    <function><type><name>float</name></type> <name>SparseCompRow_num_flops</name><parameter_list>(<param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>int</name></type> <name>nz</name></decl></param>, <param><decl><type><name>int</name></type> <name>num_iterations</name></decl></param>)</parameter_list>
    <block>{
        <comment type="block">/* Note that if nz does not divide N evenly, then the
           actual number of nonzeros used is adjusted slightly.
        */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>actual_nz</name> =<init> <expr>(<name>nz</name>/<name>N</name>) * <name>N</name></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>float</name>)<name>actual_nz</name>) * 2.0 * ((<name>float</name>) <name>num_iterations</name>)</expr>;</return>
    }</block></function>


    <comment type="block">/* computes  a matrix-vector multiply with a sparse matrix
        held in compress-row format.  If the size of the matrix
        in MxN with nz nonzeros, then the val[] is the nz nonzeros,
        with its ith entry in column col[i].  The integer vector row[]
        is of size M+1 and row[i] points to the begining of the
        ith row in col[].  
    */</comment>

<comment type="line">// MODIFIED FOR TEST CODE</comment>
    <function><type><name>void</name></type> <name>SparseCompRow_matmult</name><parameter_list>( <param><decl><type><name>int</name></type> <name>M</name></decl></param>, <param><decl><type><name>float</name> *</type><name>y</name></decl></param>, <param><decl><type><name>float</name> *</type><name>val</name></decl></param>, <param><decl><type><name>int</name> *</type><name>row</name></decl></param>,
				<param><decl><type><name>int</name> *</type><name>col</name></decl></param>, <param><decl><type><name>float</name> *</type><name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>NUM_ITERATIONS</name></decl></param>, 
				<param><decl><type><name>int</name></type> <name>print</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>reps</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <for>for (<init><expr><name>reps</name>=0</expr>;</init> <condition><expr><name>reps</name>&lt;<name>NUM_ITERATIONS</name></expr>;</condition> <incr><expr><name>reps</name>++</expr></incr>)
        <block>{
        
            <for>for (<init><expr><name>r</name>=0</expr>;</init> <condition><expr><name>r</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>sum</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt> 
                <decl_stmt><decl><type><name>int</name></type> <name>rowR</name> =<init> <expr><name><name>row</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>rowRp1</name> =<init> <expr><name><name>row</name><index>[<expr><name>r</name>+1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for (<init><expr><name>i</name>=<name>rowR</name></expr>;</init> <condition><expr><name>i</name>&lt;<name>rowRp1</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                    <expr_stmt><expr><name>sum</name> += <name><name>x</name><index>[ <expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> * <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
                <expr_stmt><expr><name><name>y</name><index>[<expr><name>r</name></expr>]</index></name> = <name>sum</name></expr>;</expr_stmt>
            }</block></for>
        }</block></for>

	<if>if<condition>(<expr><name>print</name></expr>)</condition><then>
	  <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for(<init><expr><name>z</name> = 0</expr>;</init> <condition><expr><name>z</name> &lt; <name>M</name></expr>;</condition> <incr><expr><name>z</name>++</expr></incr>)
	      <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%f"</expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      }</block></for>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></then></if>
    }</block></function>

</unit>
