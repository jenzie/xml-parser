<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="C:/Users/Serenity/SkyDrive/Documents/College/rit_research/xml-parser/results\input_src\LU.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LU.h"</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>LU_num_flops</name><parameter_list>(<param><decl><type><name>int</name></type> <name>N</name></decl></param>)</parameter_list>
<block>{
        <comment type="block">/* rougly 2/3*N^3 */</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>Nd</name> =<init> <expr>(<name>double</name>) <name>N</name></expr></init></decl>;</decl_stmt>

    <return>return <expr>(2.0 * <name>Nd</name> *<name>Nd</name> *<name>Nd</name>/ 3.0)</expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>LU_copy_matrix</name><parameter_list>(<param><decl><type><name>int</name></type> <name>M</name></decl></param>, <param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>double</name> **</type><name>lu</name></decl></param>, <param><decl><type><name>double</name> **</type><name>A</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <for>for (<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
            <expr_stmt><expr><name><name>lu</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> = <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></for></for>
}</block></function>


<function><type><name>int</name></type> <name>LU_factor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>M</name></decl></param>, <param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>double</name> **</type><name>A</name></decl></param>,  <param><decl><type><name>int</name> *</type><name>pivot</name></decl></param>, <param><decl><type><name>int</name></type> <name>print</name></decl></param>)</parameter_list>
<block>{
 

    <decl_stmt><decl><type><name>int</name></type> <name>minMN</name> =<init>  <expr><name>M</name> &lt; <name>N</name> ? <name>M</name> : <name>N</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name>=<init><expr>0</expr></init></decl>;</decl_stmt>

    <for>for (<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>minMN</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
    <block>{
        <comment type="block">/* find pivot in column j and  test for singularity. */</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>jp</name>=<init><expr><name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>t</name> =<init> <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><expr><name>i</name>=<name>j</name>+1</expr>;</init> <condition><expr><name>i</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>ab</name> =<init> <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>ab</name> &gt; <name>t</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>jp</name> = <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>t</name> = <name>ab</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        
        <expr_stmt><expr><name><name>pivot</name><index>[<expr><name>j</name></expr>]</index></name> = <name>jp</name></expr>;</expr_stmt>

        <comment type="block">/* jp now has the index of maximum element  */</comment>
        <comment type="block">/* of column j, below the diagonal          */</comment>

        <if>if <condition>( <expr><name><name>A</name><index>[<expr><name>jp</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> == 0</expr> )</condition><then>                 
            <return>return <expr>1</expr>;</return></then></if>       <comment type="block">/* factorization failed because of zero pivot */</comment>


        <if>if <condition>(<expr><name>jp</name> != <name>j</name></expr>)</condition><then>
        <block>{
            <comment type="block">/* swap rows j and jp */</comment>
            <decl_stmt><decl><type><name>double</name> *</type><name>tA</name> =<init> <expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>A</name><index>[<expr><name>jp</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>jp</name></expr>]</index></name> = <name>tA</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>j</name>&lt;<name>M</name>-1</expr>)</condition><then>                <comment type="block">/* compute elements j+1:M of jth column  */</comment>
        <block>{
            <comment type="block">/* note A(j,j), was A(jp,p) previously which was */</comment>
            <comment type="block">/* guarranteed not to be zero (Label #1)         */</comment>

            <decl_stmt><decl><type><name>double</name></type> <name>recp</name> =<init>  <expr>1.0 / <name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
            <for>for (<init><expr><name>k</name>=<name>j</name>+1</expr>;</init> <condition><expr><name>k</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>)
                <expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> *= <name>recp</name></expr>;</expr_stmt></for>
        }</block></then></if>


        <if>if <condition>(<expr><name>j</name> &lt; <name>minMN</name>-1</expr>)</condition><then>
        <block>{
            <comment type="block">/* rank-1 update to trailing submatrix:   E = E - x*y; */</comment>
            <comment type="block">/* E is the region A(j+1:M, j+1:N) */</comment>
            <comment type="block">/* x is the column vector A(j+1:M,j) */</comment>
            <comment type="block">/* y is row vector A(j,j+1:N)        */</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
            <for>for (<init><expr><name>ii</name>=<name>j</name>+1</expr>;</init> <condition><expr><name>ii</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>ii</name>++</expr></incr>)
            <block>{
                <decl_stmt><decl><type><name>double</name> *</type><name>Aii</name> =<init> <expr><name><name>A</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name> *</type><name>Aj</name> =<init> <expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>AiiJ</name> =<init> <expr><name><name>Aii</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
                <for>for (<init><expr><name>jj</name>=<name>j</name>+1</expr>;</init> <condition><expr><name>jj</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>jj</name>++</expr></incr>)
                  <expr_stmt><expr><name><name>Aii</name><index>[<expr><name>jj</name></expr>]</index></name> -= <name>AiiJ</name> * <name><name>Aj</name><index>[<expr><name>jj</name></expr>]</index></name></expr>;</expr_stmt></for>

            }</block></for>
        }</block></then></if>
    }</block></for>
    
    <if>if<condition>(<expr><name>print</name></expr>)</condition><then>
      <block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name>, <name>z</name></decl>;</decl_stmt>
	<for>for(<init><expr><name>y</name> = 0</expr>;</init> <condition><expr><name>y</name> &lt; <name>M</name></expr>;</condition> <incr><expr><name>y</name>++</expr></incr>)
	  <block>{
	    <for>for(<init><expr><name>z</name> = 0</expr>;</init> <condition><expr><name>z</name> &lt; <name>N</name></expr>;</condition> <incr><expr><name>z</name>++</expr></incr>)
	      <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%f"</expr></argument>, <argument><expr><name><name>A</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      }</block></for>
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></for>
      }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

</unit>
