<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="C:\Users\Serenity\SkyDrive\Documents\College\rit_research\xml-parser\input_src\Random.cpp">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Random.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NULL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>NULL</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


  <comment type="block">/* static const int mdig = 32; */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MDIG</name> 32</cpp:define>

  <comment type="block">/* static const int one = 1; */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ONE</name> 1</cpp:define>

  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>int</name></type> <name>m1</name> =<init> <expr>(<name>ONE</name> &lt;&lt; (<name>MDIG</name>-2)) + ((<name>ONE</name> &lt;&lt; (<name>MDIG</name>-2) )-<name>ONE</name>)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>int</name></type> <name>m2</name> =<init> <expr><name>ONE</name> &lt;&lt; <name>MDIG</name>/2</expr></init></decl>;</decl_stmt>

  <comment type="block">/* For mdig = 32 : m1 =          2147483647, m2 =      65536
     For mdig = 64 : m1 = 9223372036854775807, m2 = 4294967296 
  */</comment>

                                <comment type="block">/* move to initialize() because  */</comment>
                                <comment type="block">/* compiler could not resolve as */</comment>
                                <comment type="block">/*   a constant.                 */</comment>

  <decl_stmt><decl><type><name>static</name> <comment type="block">/*const*/</comment> <name>double</name></type> <name>dm1</name></decl>;</decl_stmt>  <comment type="block">/*  = 1.0 / (double) m1; */</comment>


<comment type="block">/* private methods (defined below, but not in Random.h */</comment>

<function_decl><type><name>static</name> <name>void</name></type> <name>initialize</name><parameter_list>(<param><decl><type><name>Random</name></type> <name>R</name></decl></param>, <param><decl><type><name>int</name></type> <name>seed</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>Random</name></type> <name>new_Random_seed</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seed</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Random</name></type> <name>R</name> =<init> <expr>(<name>Random</name>) <call><name>malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>Random_struct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>left</name> = 0.0</expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>right</name> = 1.0</expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>width</name> = 1.0</expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>haveRange</name> = 0</expr> <comment type="block">/*false*/</comment>;</expr_stmt>

    <return>return <expr><name>R</name></expr>;</return>
}</block></function>

<function><type><name>Random</name></type> <name>new_Random</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seed</name></decl></param>, <param><decl><type><name>double</name></type> <name>left</name></decl></param>, <param><decl><type><name>double</name></type> <name>right</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>Random</name></type> <name>R</name> =<init> <expr>(<name>Random</name>) <call><name>malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>Random_struct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>left</name> = <name>left</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>right</name> = <name>right</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>width</name> = <name>right</name> - <name>left</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>haveRange</name> = 1</expr>;</expr_stmt>          <comment type="block">/* true */</comment>

    <return>return <expr><name>R</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Random_delete</name><parameter_list>(<param><decl><type><name>Random</name></type> <name>R</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<comment type="block">/* Returns the next random number in the sequence.  */</comment>

<function><type><name>double</name></type> <name>Random_nextDouble</name><parameter_list>(<param><decl><type><name>Random</name></type> <name>R</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>I</name> =<init> <expr><name>R</name>-&gt;<name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>J</name> =<init> <expr><name>R</name>-&gt;<name>j</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> *</type><name>m</name> =<init> <expr><name>R</name>-&gt;<name>m</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>k</name> = <name><name>m</name><index>[<expr><name>I</name></expr>]</index></name> - <name><name>m</name><index>[<expr><name>J</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>k</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>k</name> += <name>m1</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>R</name>-&gt;<name><name>m</name><index>[<expr><name>J</name></expr>]</index></name> = <name>k</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>I</name> == 0</expr>)</condition><then> 
        <expr_stmt><expr><name>I</name> = 16</expr>;</expr_stmt></then>
    <else>else <expr_stmt><expr><name>I</name>--</expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name>R</name>-&gt;<name>i</name> = <name>I</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>J</name> == 0</expr>)</condition><then> 
        <expr_stmt><expr><name>J</name> = 16</expr> ;</expr_stmt></then>
    <else>else <expr_stmt><expr><name>J</name>--</expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name>R</name>-&gt;<name>j</name> = <name>J</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>R</name>-&gt;<name>haveRange</name></expr>)</condition><then> 
        <return>return  <expr><name>R</name>-&gt;<name>left</name> +  <name>dm1</name> * (<name>double</name>) <name>k</name> * <name>R</name>-&gt;<name>width</name></expr>;</return></then>
    <else>else
        <return>return <expr><name>dm1</name> * (<name>double</name>) <name>k</name></expr>;</return></else></if>

}</block></function> 




<comment type="block">/*--------------------------------------------------------------------
                           PRIVATE METHODS
  ----------------------------------------------------------------- */</comment>

<function><type><name>static</name> <name>void</name></type> <name>initialize</name><parameter_list>(<param><decl><type><name>Random</name></type> <name>R</name></decl></param>, <param><decl><type><name>int</name></type> <name>seed</name></decl></param>)</parameter_list> 
<block>{

    <decl_stmt><decl><type><name>int</name></type> <name>jseed</name>, <name>k0</name>, <name>k1</name>, <name>j0</name>, <name>j1</name>, <name>iloop</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dm1</name>  = 1.0 / (<name>double</name>) <name>m1</name></expr>;</expr_stmt> 

    <expr_stmt><expr><name>R</name>-&gt;<name>seed</name> = <name>seed</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>seed</name> &lt; 0</expr> )</condition><then> <expr_stmt><expr><name>seed</name> = -<name>seed</name></expr>;</expr_stmt></then></if>            <comment type="block">/* seed = abs(seed) */</comment>  
    <expr_stmt><expr><name>jseed</name> = (<name>seed</name> &lt; <name>m1</name> ? <name>seed</name> : <name>m1</name>)</expr>;</expr_stmt>        <comment type="block">/* jseed = min(seed, m1) */</comment>
    <if>if <condition>(<expr><name>jseed</name> % 2 == 0</expr>)</condition><then> <expr_stmt><expr>--<name>jseed</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>k0</name> = 9069 % <name>m2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> = 9069 / <name>m2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j0</name> = <name>jseed</name> % <name>m2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j1</name> = <name>jseed</name> / <name>m2</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>iloop</name> = 0</expr>;</init> <condition><expr><name>iloop</name> &lt; 17</expr>;</condition> <incr><expr>++<name>iloop</name></expr></incr>) 
    <block>{
        <expr_stmt><expr><name>jseed</name> = <name>j0</name> * <name>k0</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j1</name> = (<name>jseed</name> / <name>m2</name> + <name>j0</name> * <name>k1</name> + <name>j1</name> * <name>k0</name>) % (<name>m2</name> / 2)</expr>;</expr_stmt>
        <expr_stmt><expr><name>j0</name> = <name>jseed</name> % <name>m2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>R</name>-&gt;<name><name>m</name><index>[<expr><name>iloop</name></expr>]</index></name> = <name>j0</name> + <name>m2</name> * <name>j1</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>R</name>-&gt;<name>i</name> = 4</expr>;</expr_stmt>
    <expr_stmt><expr><name>R</name>-&gt;<name>j</name> = 16</expr>;</expr_stmt>

}</block></function>

<function><type><name>double</name> *</type><name>RandomVector</name><parameter_list>(<param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>Random</name></type> <name>R</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> *</type><name>x</name> =<init> <expr>(<name>double</name> *) <call><name>malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>double</name>*</expr></argument>)</argument_list></call>*<name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>Random_nextDouble</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//printf("%f\n", x[i]);</comment>
    }</block></for>

    <return>return <expr><name>x</name></expr>;</return>
}</block></function>


<function><type><name>double</name> **</type><name>RandomMatrix</name><parameter_list>(<param><decl><type><name>int</name></type> <name>M</name></decl></param>, <param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>Random</name></type> <name>R</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <comment type="block">/* allocate matrix */</comment>

    <decl_stmt><decl><type><name>double</name> **</type><name>A</name> =<init> <expr>(<name>double</name> **) <call><name>malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>double</name>*</expr></argument>)</argument_list></call>*<name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>A</name> == <name>NULL</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>double</name> *) <call><name>malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>double</name>*</expr></argument>)</argument_list></call>*<name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> == <name>NULL</name></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <for>for (<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> = <call><name>Random_nextDouble</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></for>
    <return>return <expr><name>A</name></expr>;</return>
}</block></function>



</unit>
