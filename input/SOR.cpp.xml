<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="OriginalSourceCode\SOR.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SOR.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

    <function><type><name>double</name></type> <name>SOR_num_flops</name><parameter_list>(<param><decl><type><name>int</name></type> <name>M</name></decl></param>, <param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>int</name></type> <name>num_iterations</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>Md</name> =<init> <expr>(<name>double</name>) <name>M</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>Nd</name> =<init> <expr>(<name>double</name>) <name>N</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>num_iterD</name> =<init> <expr>(<name>double</name>) <name>num_iterations</name></expr></init></decl>;</decl_stmt>

        <return>return <expr>(<name>Md</name>-1)*(<name>Nd</name>-1)*<name>num_iterD</name>*6.0</expr>;</return>
    }</block></function>

<comment type="line">// MODIFIED FOR TEST CODE</comment>
    <function><type><name>void</name></type> <name>SOR_execute</name><parameter_list>(<param><decl><type><name>int</name></type> <name>M</name></decl></param>, <param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>double</name></type> <name>omega</name></decl></param>, <param><decl><type><name>double</name> **</type><name>G</name></decl></param>, <param><decl><type><name>int</name></type> 
		     <name>num_iterations</name></decl></param>, <param><decl><type><name>int</name></type> <name>print</name></decl></param>)</parameter_list>
    <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>omega_over_four</name> =<init> <expr><name>omega</name> * 0.25</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>one_minus_omega</name> =<init> <expr>1.0 - <name>omega</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* update interior points */</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>Mm1</name> =<init> <expr><name>M</name>-1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>Nm1</name> =<init> <expr><name>N</name>-1</expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name> *</type><name>Gi</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name> *</type><name>Gim1</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name> *</type><name>Gip1</name></decl>;</decl_stmt>

        <for>for (<init><expr><name>p</name>=0</expr>;</init> <condition><expr><name>p</name>&lt;<name>num_iterations</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
        <block>{
            <for>for (<init><expr><name>i</name>=1</expr>;</init> <condition><expr><name>i</name>&lt;<name>Mm1</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
                <expr_stmt><expr><name>Gi</name> = <name><name>G</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>Gim1</name> = <name><name>G</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>Gip1</name> = <name><name>G</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr>;</expr_stmt>
                <for>for (<init><expr><name>j</name>=1</expr>;</init> <condition><expr><name>j</name>&lt;<name>Nm1</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
                    <expr_stmt><expr><name><name>Gi</name><index>[<expr><name>j</name></expr>]</index></name> = <name>omega_over_four</name> * (<name><name>Gim1</name><index>[<expr><name>j</name></expr>]</index></name> + <name><name>Gip1</name><index>[<expr><name>j</name></expr>]</index></name> + <name><name>Gi</name><index>[<expr><name>j</name>-1</expr>]</index></name> 
                                + <name><name>Gi</name><index>[<expr><name>j</name>+1</expr>]</index></name>) + <name>one_minus_omega</name> * <name><name>Gi</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></for>
            }</block></for>
        }</block></for>

	<comment type="line">// ADDED TEST OUTPUT, print the results</comment>
	<if>if<condition>( <expr><name>print</name></expr> )</condition><then>
	  <block>{
	    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>y</name>, <name>z</name></decl>;</decl_stmt>
	    <for>for(<init><expr><name>y</name>=0</expr>;</init> <condition><expr><name>y</name>&lt;<name>M</name></expr>;</condition> <incr><expr><name>y</name>++</expr></incr>)
	      <block>{
		<for>for(<init><expr><name>z</name>=0</expr>;</init> <condition><expr><name>z</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>z</name>++</expr></incr>)
		  <block>{
		    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%f"</expr></argument>, <argument><expr><name><name>G</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      }</block></for>
	  }</block></then></if>
    }</block></function>
            
</unit>
